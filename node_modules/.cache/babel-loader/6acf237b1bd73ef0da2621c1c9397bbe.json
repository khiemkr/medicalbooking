{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { getAllCodeService, createNewUserService, getAllUsers, deleteUserService, editUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctor } from '../../services/userService';\nimport { toast } from 'react-toastify'; // export const fetchGenderStart = () => {\n//     return async (dispatch,getState)=>{\n//         try {\n//             dispatch({type: actionTypes.FETCH_GENDER_START})\n//             let res = await getAllCodeService(\"GENDER\");\n//             if(res && res.errCode === 0){\n//                 dispatch(fetchGenderSuccess(res.data));\n//             }else{\n//                 dispatch(fetchGenderFailed());\n//             }\n//         } catch (e) {\n//             dispatch(fetchGenderFailed());\n//             console.log(e)\n//         }\n//     }\n// }\n// export const fetchGenderSuccess = (genderData) => ({\n//     type: actionTypes.FETCH_GENDER_SUCCESS,\n//     data: genderData\n// })\n// export const fetchGenderFailed = () => ({\n//     type: actionTypes.FETCH_GENDER_FAILED\n// })\n// export const fetchPositionStart = () => {\n//     return async (dispatch,getState)=>{\n//         try {\n//             let res = await getAllCodeService(\"POSITION\");\n//             if(res && res.errCode === 0){\n//                 dispatch(fetchPositionSuccess(res.data));\n//             }else{\n//                 dispatch(fetchPositionFailed());\n//             }\n//         } catch (e) {\n//             dispatch(fetchPositionFailed());\n//             console.log(e)\n//         }\n//     }\n// }\n// export const fetchPositionSuccess = (positionData) => ({\n//     type: actionTypes.FETCH_POSITION_SUCCESS,\n//     data: positionData\n// })\n// export const fetchPositionFailed = () => ({\n//     type: actionTypes.FETCH_POSITION_FAILED\n// })\n// export const fetchRoleStart = () => {\n//     return async (dispatch,getState)=>{\n//         try {\n//             let res = await getAllCodeService(\"ROLE\");\n//             if(res && res.errCode === 0){\n//                 dispatch(fetchRoleSuccess(res.data));\n//             }else{\n//                 dispatch(fetchRoleFailed());\n//             }\n//         } catch (e) {\n//             dispatch(fetchRoleFailed());\n//             console.log(e)\n//         }\n//     }\n// }\n// export const fetchRoleSuccess = (roleData) => ({\n//     type: actionTypes.FETCH_ROLE_SUCCESS,\n//     data: roleData\n// })\n// export const fetchRoleFailed = () => ({\n//     type: actionTypes.FETCH_ROLE_FAILED\n// })\n\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService(data);\n      console.log('check', res);\n\n      if (res && res.errCode === 0) {\n        toast.success('Create new user success');\n        dispatch(saveUserSuccess());\n        dispatch(fetchAllUserStart());\n      } else {\n        dispatch(saveUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const saveUserSuccess = () => ({\n  type: actionTypes.CREATE_USER_SUCCESS\n});\nexport const saveUserFailed = () => ({\n  type: actionTypes.CREATE_USER_FAILD\n});\nexport const fetchAllUserStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllUsers(\"All\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllUserSuccess(res.users.reverse()));\n      } else {\n        dispatch(fetchAllUserFailed());\n      }\n    } catch (e) {\n      dispatch(fetchAllUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const fetchAllUserSuccess = data => ({\n  type: 'FETCH_ALL_USER_SUCCESS',\n  users: data\n});\nexport const fetchAllUserFailed = () => ({\n  type: 'FETCH_ALL_USER_FAILED'\n});\nexport const deleteUser = userId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUserService(userId);\n      console.log('check', res);\n\n      if (res && res.errCode === 0) {\n        toast.success('Delete user success');\n        dispatch(deleteUserSuccess());\n        dispatch(fetchAllUserStart());\n      } else {\n        toast.error('Delete user error');\n        dispatch(deleteUserFailed());\n      }\n    } catch (e) {\n      dispatch(deleteUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const deleteUserSuccess = () => ({\n  type: 'DELETE_USER_SUCCESS'\n});\nexport const deleteUserFailed = () => ({\n  type: 'DELETE_USER_FAILD'\n});\nexport const editUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editUserService(data);\n      console.log('check', res);\n\n      if (res && res.errCode === 0) {\n        toast.success('Update user success');\n        dispatch(editUserSuccess());\n        dispatch(fetchAllUserStart());\n      } else {\n        toast.error('Update user error');\n        dispatch(editUserFailed());\n      }\n    } catch (e) {\n      dispatch(editUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const editUserSuccess = () => ({\n  type: 'EDIT_USER_SUCCESS'\n});\nexport const editUserFailed = () => ({\n  type: 'EDIT_USER_FAILD'\n});\nexport const fetchTopDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopDoctorHomeService('');\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\n          dataDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDoctors('');\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\n          dataAllDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const saveDetailInfoDoctor = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailDoctor(data);\n\n      if (res && res.errCode === 0) {\n        toast.success('user info detail doctor success');\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS\n        });\n      } else {\n        toast.error('user info detail doctor fail');\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      toast.error('user info detail doctor fail');\n      dispatch({\n        type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllScheduleHours = type => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService('TIME');\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED\n      });\n    }\n  };\n};","map":{"version":3,"sources":["D:/NienLuan/project/REACTJS/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeService","createNewUserService","getAllUsers","deleteUserService","editUserService","getTopDoctorHomeService","getAllDoctors","saveDetailDoctor","toast","createNewUser","data","dispatch","getState","res","console","log","errCode","success","saveUserSuccess","fetchAllUserStart","saveUserFailed","e","type","CREATE_USER_SUCCESS","CREATE_USER_FAILD","fetchAllUserSuccess","users","reverse","fetchAllUserFailed","deleteUser","userId","deleteUserSuccess","error","deleteUserFailed","editUser","editUserSuccess","editUserFailed","fetchTopDoctor","FETCH_TOP_DOCTOR_SUCCESS","dataDoctors","FETCH_TOP_DOCTOR_FAILED","fetchAllDoctor","FETCH_ALL_DOCTOR_SUCCESS","dataAllDoctors","FETCH_ALL_DOCTOR_FAILED","saveDetailInfoDoctor","SAVE_DETAIL_DOCTOR_SUCCESS","SAVE_DETAIL_DOCTOR_FAILED","fetchAllScheduleHours","FETCH_ALLCODE_SCHEDULE_HOURS_SUCCESS","dataTime","FETCH_ALLCODE_SCHEDULE_HOURS_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { getAllCodeService,createNewUserService,getAllUsers,deleteUserService,editUserService,getTopDoctorHomeService, getAllDoctors,saveDetailDoctor } from '../../services/userService';\r\nimport { toast } from 'react-toastify';\r\n// export const fetchGenderStart = () => {\r\n//     return async (dispatch,getState)=>{\r\n//         try {\r\n//             dispatch({type: actionTypes.FETCH_GENDER_START})\r\n//             let res = await getAllCodeService(\"GENDER\");\r\n//             if(res && res.errCode === 0){\r\n//                 dispatch(fetchGenderSuccess(res.data));\r\n\r\n//             }else{\r\n//                 dispatch(fetchGenderFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(fetchGenderFailed());\r\n//             console.log(e)\r\n//         }\r\n//     }\r\n// }\r\n// export const fetchGenderSuccess = (genderData) => ({\r\n//     type: actionTypes.FETCH_GENDER_SUCCESS,\r\n//     data: genderData\r\n// })\r\n// export const fetchGenderFailed = () => ({\r\n//     type: actionTypes.FETCH_GENDER_FAILED\r\n// })\r\n\r\n\r\n\r\n// export const fetchPositionStart = () => {\r\n//     return async (dispatch,getState)=>{\r\n//         try {\r\n//             let res = await getAllCodeService(\"POSITION\");\r\n//             if(res && res.errCode === 0){\r\n//                 dispatch(fetchPositionSuccess(res.data));\r\n\r\n//             }else{\r\n//                 dispatch(fetchPositionFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(fetchPositionFailed());\r\n//             console.log(e)\r\n//         }\r\n//     }\r\n// }\r\n// export const fetchPositionSuccess = (positionData) => ({\r\n//     type: actionTypes.FETCH_POSITION_SUCCESS,\r\n//     data: positionData\r\n// })\r\n// export const fetchPositionFailed = () => ({\r\n//     type: actionTypes.FETCH_POSITION_FAILED\r\n// })\r\n\r\n\r\n\r\n// export const fetchRoleStart = () => {\r\n//     return async (dispatch,getState)=>{\r\n//         try {\r\n//             let res = await getAllCodeService(\"ROLE\");\r\n//             if(res && res.errCode === 0){\r\n//                 dispatch(fetchRoleSuccess(res.data));\r\n\r\n//             }else{\r\n//                 dispatch(fetchRoleFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(fetchRoleFailed());\r\n//             console.log(e)\r\n//         }\r\n//     }\r\n// }\r\n// export const fetchRoleSuccess = (roleData) => ({\r\n//     type: actionTypes.FETCH_ROLE_SUCCESS,\r\n//     data: roleData\r\n// })\r\n// export const fetchRoleFailed = () => ({\r\n//     type: actionTypes.FETCH_ROLE_FAILED\r\n// })\r\n\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            console.log('check',res)\r\n            if(res && res.errCode === 0){\r\n                toast.success('Create new user success')\r\n                dispatch(saveUserSuccess());\r\n                dispatch(fetchAllUserStart());\r\n            }else{\r\n                dispatch(saveUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(saveUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveUserSuccess = () => ({\r\n    type: actionTypes.CREATE_USER_SUCCESS,\r\n})\r\n\r\nexport const saveUserFailed = () => ({\r\n    type: actionTypes.CREATE_USER_FAILD,\r\n})\r\n\r\n\r\nexport const fetchAllUserStart = () => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllUsers(\"All\");\r\n            if(res && res.errCode === 0){\r\n                dispatch(fetchAllUserSuccess(res.users.reverse()));\r\n            }else{\r\n                dispatch(fetchAllUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchAllUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport const fetchAllUserSuccess = (data) =>({\r\n    type: 'FETCH_ALL_USER_SUCCESS',\r\n    users: data\r\n})\r\nexport const fetchAllUserFailed = () =>({\r\n    type: 'FETCH_ALL_USER_FAILED',\r\n})\r\n\r\n\r\nexport const deleteUser = (userId) => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            console.log('check',res)\r\n            if(res && res.errCode === 0){\r\n                toast.success('Delete user success')\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(fetchAllUserStart());\r\n            }else{\r\n                toast.error('Delete user error')\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(deleteUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUserSuccess = () =>({\r\n    type: 'DELETE_USER_SUCCESS',\r\n})\r\nexport const deleteUserFailed = () =>({\r\n    type: 'DELETE_USER_FAILD',\r\n})\r\n\r\nexport const editUser = (data) => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await editUserService(data);\r\n            console.log('check',res)\r\n            if(res && res.errCode === 0){\r\n                toast.success('Update user success')\r\n                dispatch(editUserSuccess());\r\n                dispatch(fetchAllUserStart());\r\n            }else{\r\n                toast.error('Update user error')\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(editUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const editUserSuccess = () =>({\r\n    type: 'EDIT_USER_SUCCESS',\r\n})\r\nexport const editUserFailed = () =>({\r\n    type: 'EDIT_USER_FAILD',\r\n})\r\n\r\n\r\nexport const fetchTopDoctor = () =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getTopDoctorHomeService('');\r\n            if(res && res.errCode === 0){\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\r\n                    dataDoctors: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTOR_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_TOP_DOCTOR_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllDoctor = () =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllDoctors('');\r\n            if(res && res.errCode === 0){\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\r\n                    dataAllDoctors: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTOR_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTOR_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveDetailInfoDoctor = (data) =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await saveDetailDoctor(data);\r\n            if(res && res.errCode === 0){\r\n                toast.success('user info detail doctor success')\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS,\r\n                })\r\n            }else{\r\n                toast.error('user info detail doctor fail')\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error('user info detail doctor fail')\r\n            dispatch({\r\n                type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllScheduleHours = (type) =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllCodeService('TIME');\r\n            if(res && res.errCode === 0){\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_SUCCESS,\r\n                    dataTime: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}