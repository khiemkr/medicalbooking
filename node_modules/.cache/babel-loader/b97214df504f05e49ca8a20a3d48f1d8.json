{"ast":null,"code":"var _jsxFileName = \"D:\\\\NienLuan\\\\project\\\\REACTJS\\\\src\\\\containers\\\\System\\\\Admin\\\\ManagaDoctor.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './TableManageUser.scss';\nimport * as actions from '../../../store/actions';\nimport MarkdownIt from 'markdown-it';\nimport MdEditor from 'react-markdown-editor-lite';\nimport 'react-markdown-editor-lite/lib/index.css';\nimport './ManageDoctor.scss';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'chocolate',\n  label: 'chocolate'\n}, {\n  value: 'chocolate1',\n  label: 'chocolate1'\n}, {\n  value: 'chocolate2',\n  label: 'chocolate2'\n}];\nconst mdParser = new MarkdownIt();\n\nclass ManageDoctor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildDataInputSelect = inputData => {\n      let result = [];\n\n      if (inputData && inputData.length > 0) {\n        inputData.map((item, index) => {\n          let object = {};\n          object.label = `${item.lastName} ${item.firstName}`;\n          object.value = item.id;\n          result.push(object);\n        });\n      }\n\n      return result;\n    };\n\n    this.handleEditorChange = ({\n      html,\n      text\n    }) => {\n      this.setState({\n        contentMarkdown: text,\n        contentHTML: html\n      });\n    };\n\n    this.handleSaveContentMarkdown = () => {// alert('click me')\n    };\n\n    this.handleChange = selectedDoctor => {\n      this.setState({\n        selectedDoctor\n      });\n    };\n\n    this.handleOnChangeDesc = e => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.state = {\n      contentMarkdown: '',\n      contentHTML: '',\n      selectedDoctor: '',\n      description: '',\n      listDoctors: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetAllDoctorsRedux();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.allDoctors !== this.props.allDoctors) {\n      let dataSec;\n      this.setState({\n        listDoctors: this.props.allDoctors\n      });\n    }\n  }\n\n  render() {\n    console.log('check state', this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manage-doctor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage-doctor-title\",\n        children: \"tao them thong tin doctor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"more-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-left form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Chon bac si\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: this.state.selectedDoctor,\n            onChange: this.handleChange,\n            options: options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Thong tin gioi thieu:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            rows: \"4\",\n            onChange: e => this.handleOnChangeDesc(e),\n            value: this.setState.description,\n            children: \"fdfsdfs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage-doctor-editor\",\n        children: /*#__PURE__*/_jsxDEV(MdEditor, {\n          style: {\n            height: '500px'\n          },\n          renderHTML: text => mdParser.render(text),\n          onChange: this.handleEditorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleSaveContentMarkdown(),\n        className: \"save-content-doctor\",\n        children: \"Luu thong tin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    allDoctors: state.admin.allDoctors\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetAllDoctorsRedux: () => dispatch(actions.fetchAllDoctor())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);","map":{"version":3,"sources":["D:/NienLuan/project/REACTJS/src/containers/System/Admin/ManagaDoctor.js"],"names":["React","Component","connect","actions","MarkdownIt","MdEditor","Select","options","value","label","mdParser","ManageDoctor","constructor","props","buildDataInputSelect","inputData","result","length","map","item","index","object","lastName","firstName","id","push","handleEditorChange","html","text","setState","contentMarkdown","contentHTML","handleSaveContentMarkdown","handleChange","selectedDoctor","handleOnChangeDesc","e","description","target","state","listDoctors","componentDidMount","fetAllDoctorsRedux","componentDidUpdate","prevProps","prevState","snapshot","allDoctors","dataSec","render","console","log","height","mapStateToProps","admin","mapDispatchToProps","dispatch","fetchAllDoctor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss'\r\nimport * as actions from '../../../store/actions'\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite'\r\nimport 'react-markdown-editor-lite/lib/index.css'\r\nimport './ManageDoctor.scss'\r\nimport Select from 'react-select'\r\n\r\nconst options =[\r\n    {value: 'chocolate', label:'chocolate'},\r\n    {value: 'chocolate1', label:'chocolate1'},\r\n    {value: 'chocolate2', label:'chocolate2'}\r\n\r\n\r\n]\r\nconst mdParser = new MarkdownIt();\r\nclass ManageDoctor extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            contentMarkdown: '',\r\n            contentHTML:'',\r\n            selectedDoctor:'',\r\n            description:'',\r\n            listDoctors:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.props.fetAllDoctorsRedux();\r\n    }\r\n    buildDataInputSelect = (inputData) =>{\r\n        let result = [];\r\n        if(inputData && inputData.length>0){\r\n            inputData.map((item,index) =>{\r\n                let object ={} \r\n                object.label = `${item.lastName} ${item.firstName}`;\r\n                object.value = item.id;\r\n                result.push(object)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    componentDidUpdate(prevProps,prevState,snapshot){\r\n      if(prevProps.allDoctors !== this.props.allDoctors){\r\n        let dataSec  \r\n        this.setState({\r\n              listDoctors: this.props.allDoctors\r\n          })\r\n      }\r\n    }\r\n    handleEditorChange = ({html,text}) => {\r\n        this.setState({\r\n            contentMarkdown:text,\r\n            contentHTML:html\r\n        })\r\n    }\r\n\r\n    handleSaveContentMarkdown = () =>{\r\n        // alert('click me')\r\n    }\r\n    handleChange = selectedDoctor =>{\r\n        this.setState({\r\n            selectedDoctor\r\n        })\r\n    }\r\n    handleOnChangeDesc = (e) =>{\r\n        this.setState({\r\n            description: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        console.log('check state', this.state)\r\n        return (\r\n            <div className='manage-doctor-container'>\r\n                <div className='manage-doctor-title'>\r\n                    tao them thong tin doctor\r\n                </div>\r\n                <div className='more-info'>\r\n                    <div className='content-left form-group'>\r\n                        <label>Chon bac si</label>\r\n                        <Select\r\n                            value={this.state.selectedDoctor}\r\n                            onChange={this.handleChange}\r\n                            options={options}\r\n                        />\r\n                    </div>\r\n                    <div className='content-right'>\r\n                        <label>Thong tin gioi thieu:</label>\r\n                        <textarea \r\n                            className='form-control' \r\n                            rows='4'\r\n                            onChange={(e) => this.handleOnChangeDesc(e)}\r\n                            value = {this.setState.description}\r\n                        >\r\n                            fdfsdfs\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n                <div className='manage-doctor-editor'>\r\n                    <MdEditor \r\n                        style={{height:'500px'}} \r\n                        renderHTML={text =>mdParser.render(text)}\r\n                        onChange={this.handleEditorChange}\r\n                    />\r\n                </div>\r\n                <button \r\n                    onClick={()=> this.handleSaveContentMarkdown()}\r\n                    className='save-content-doctor'\r\n                >\r\n                    Luu thong tin\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allDoctors: state.admin.allDoctors\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetAllDoctorsRedux: () => dispatch(actions.fetchAllDoctor()),\r\n     };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);\r\n"]},"metadata":{},"sourceType":"module"}