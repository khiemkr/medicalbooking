{"ast":null,"code":"var _jsxFileName = \"D:\\\\NienLuan\\\\project\\\\REACTJS\\\\src\\\\components\\\\Input\\\\InputSuggest.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport \"./InputSuggest.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isAlphaNumericChar = keycode => {\n  return keycode >= 48 && keycode <= 57 || keycode >= 65 && keycode <= 90;\n};\n\nclass InputSuggestion extends React.Component {\n  constructor() {\n    super();\n\n    this.getSuggestions = textInput => {\n      // if (!textInput || textInput.length === 0) return []; //chưa nhập -> chưa gợi ý\n      const inputValue = textInput.trim().toLowerCase();\n\n      if (!this.props.inputsWithIndex) {\n        return [{\n          textInput: textInput\n        }];\n      }\n\n      ;\n      let inputsWithIndex = this.props.inputsWithIndex;\n      let keyArr = Object.keys(inputsWithIndex).filter(textInput => {\n        return textInput.toLowerCase().indexOf(inputValue) >= 0;\n      });\n      var suggestArr = keyArr.map(function (key) {\n        return inputsWithIndex[key];\n      });\n      return suggestArr;\n    };\n\n    this.storeInputReference = autosuggest => {\n      if (autosuggest !== null) {\n        this.inputSearch = autosuggest.input;\n      }\n    };\n\n    this.shouldRenderSuggestions = value => {\n      return true;\n    };\n\n    this.getSuggestionValue = suggestion => {\n      this.props.onSelected(suggestion);\n      return suggestion.displayName;\n    };\n\n    this.renderSuggestion = suggestion => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggest-item\",\n        children: suggestion.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.sortSuggestions(this.getSuggestions(value), value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, selected) => {\n      this.props.onSelected(selected.suggestion);\n      this.setState({\n        textInput: selected.suggestion && selected.suggestion.displayName\n      });\n    };\n\n    this.handleChangeInput = (event, {\n      newValue\n    }) => {\n      this.setState({\n        textInput: newValue || ''\n      });\n    };\n\n    this.state = {\n      textInput: '',\n      suggestions: []\n    };\n    document.addEventListener('keydown', this.freeTyping.bind(this), false);\n  }\n\n  freeTyping(e) {\n    if (!isAlphaNumericChar(e.keyCode)) {\n      return;\n    }\n\n    if (e.target.value === undefined) {\n      this.inputSearch.focus();\n    }\n  }\n\n  sortSuggestions(suggestions, value) {\n    var results = _.sortBy(suggestions, element => {\n      return element.displayName;\n    });\n\n    return results;\n  }\n\n  reset() {\n    this.setState({\n      textInput: ''\n    });\n    this.onSuggestionsFetchRequested({\n      value: ''\n    });\n  }\n\n  handleBlurInput() {// this.setState({\n    //     textInput: ''\n    // });\n  }\n\n  render() {\n    const {\n      textInput,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      value: textInput,\n      className: \"custom-form-control\",\n      onChange: this.handleChangeInput,\n      onClick: () => {\n        this.reset();\n      },\n      onBlur: () => {\n        this.handleBlurInput();\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      onSuggestionSelected: this.onSuggestionSelected,\n      shouldRenderSuggestions: this.shouldRenderSuggestions,\n      highlightFirstSuggestion: true,\n      inputProps: inputProps,\n      ref: this.storeInputReference\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nexport default connect(mapStateToProps, null)(InputSuggestion);","map":{"version":3,"sources":["D:/NienLuan/project/REACTJS/src/components/Input/InputSuggest.js"],"names":["React","Autosuggest","connect","_","isAlphaNumericChar","keycode","InputSuggestion","Component","constructor","getSuggestions","textInput","inputValue","trim","toLowerCase","props","inputsWithIndex","keyArr","Object","keys","filter","indexOf","suggestArr","map","key","storeInputReference","autosuggest","inputSearch","input","shouldRenderSuggestions","value","getSuggestionValue","suggestion","onSelected","displayName","renderSuggestion","onSuggestionsFetchRequested","setState","suggestions","sortSuggestions","onSuggestionsClearRequested","onSuggestionSelected","event","selected","handleChangeInput","newValue","state","document","addEventListener","freeTyping","bind","e","keyCode","target","undefined","focus","results","sortBy","element","reset","handleBlurInput","render","inputProps","className","onChange","onClick","onBlur","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,qBAAP;;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AAClC,SAAQA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAA7B,IAAqCA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAAxE;AACH,CAFD;;AAIA,MAAMC,eAAN,SAA8BN,KAAK,CAACO,SAApC,CAA8C;AAC1CC,EAAAA,WAAW,GAAG;AACV;;AADU,SAmBdC,cAnBc,GAmBGC,SAAS,IAAI;AAC1B;AACA,YAAMC,UAAU,GAAGD,SAAS,CAACE,IAAV,GAAiBC,WAAjB,EAAnB;;AAEA,UAAI,CAAC,KAAKC,KAAL,CAAWC,eAAhB,EAAiC;AAC7B,eAAO,CAAC;AAAEL,UAAAA,SAAS,EAAEA;AAAb,SAAD,CAAP;AACH;;AAAA;AACD,UAAIK,eAAe,GAAG,KAAKD,KAAL,CAAWC,eAAjC;AACA,UAAIC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,eAAZ,EAA6BI,MAA7B,CACTT,SAAS,IAAI;AACT,eAAOA,SAAS,CAACG,WAAV,GAAwBO,OAAxB,CAAgCT,UAAhC,KAA+C,CAAtD;AACH,OAHQ,CAAb;AAKA,UAAIU,UAAU,GAAGL,MAAM,CAACM,GAAP,CAAW,UAAUC,GAAV,EAAe;AACvC,eAAOR,eAAe,CAACQ,GAAD,CAAtB;AACH,OAFgB,CAAjB;AAIA,aAAOF,UAAP;AACH,KArCa;;AAAA,SAuCdG,mBAvCc,GAuCQC,WAAW,IAAI;AACjC,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACtB,aAAKC,WAAL,GAAmBD,WAAW,CAACE,KAA/B;AACH;AACJ,KA3Ca;;AAAA,SA6CdC,uBA7Cc,GA6CYC,KAAK,IAAI;AAC/B,aAAO,IAAP;AACH,KA/Ca;;AAAA,SAiDdC,kBAjDc,GAiDOC,UAAU,IAAI;AAC/B,WAAKjB,KAAL,CAAWkB,UAAX,CAAsBD,UAAtB;AACA,aAAOA,UAAU,CAACE,WAAlB;AACH,KApDa;;AAAA,SAsDdC,gBAtDc,GAsDKH,UAAU,IAAI;AAC7B,0BACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBACKA,UAAU,CAACE;AADhB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KA5Da;;AAAA,SA8DdE,2BA9Dc,GA8DgB,CAAC;AAAEN,MAAAA;AAAF,KAAD,KAAe;AACzC,WAAKO,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAE,KAAKC,eAAL,CAAqB,KAAK7B,cAAL,CAAoBoB,KAApB,CAArB,EAAiDA,KAAjD;AADH,OAAd;AAGH,KAlEa;;AAAA,SA2EdU,2BA3Ec,GA2EgB,MAAM;AAChC,WAAKH,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KA/Ea;;AAAA,SAiFdG,oBAjFc,GAiFS,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC,WAAK5B,KAAL,CAAWkB,UAAX,CAAsBU,QAAQ,CAACX,UAA/B;AACA,WAAKK,QAAL,CAAc;AACV1B,QAAAA,SAAS,EAAEgC,QAAQ,CAACX,UAAT,IAAuBW,QAAQ,CAACX,UAAT,CAAoBE;AAD5C,OAAd;AAGH,KAtFa;;AAAA,SAwFdU,iBAxFc,GAwFM,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAyB;AACzC,WAAKR,QAAL,CAAc;AACV1B,QAAAA,SAAS,EAAEkC,QAAQ,IAAI;AADb,OAAd;AAGH,KA5Fa;;AAGV,SAAKC,KAAL,GAAa;AACTnC,MAAAA,SAAS,EAAE,EADF;AAET2B,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAIAS,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAArC,EAAiE,KAAjE;AACH;;AAEDD,EAAAA,UAAU,CAACE,CAAD,EAAI;AACV,QAAI,CAAC9C,kBAAkB,CAAC8C,CAAC,CAACC,OAAH,CAAvB,EAAoC;AAChC;AACH;;AACD,QAAID,CAAC,CAACE,MAAF,CAASvB,KAAT,KAAmBwB,SAAvB,EAAkC;AAC9B,WAAK3B,WAAL,CAAiB4B,KAAjB;AACH;AACJ;;AAmDDhB,EAAAA,eAAe,CAACD,WAAD,EAAcR,KAAd,EAAqB;AAChC,QAAI0B,OAAO,GAAIpD,CAAC,CAACqD,MAAF,CAASnB,WAAT,EAAuBoB,OAAD,IAAa;AAC9C,aAAOA,OAAO,CAACxB,WAAf;AACH,KAFc,CAAf;;AAGA,WAAOsB,OAAP;AACH;;AAqBDG,EAAAA,KAAK,GAAG;AACJ,SAAKtB,QAAL,CAAc;AACV1B,MAAAA,SAAS,EAAE;AADD,KAAd;AAGA,SAAKyB,2BAAL,CAAiC;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAAjC;AACH;;AAED8B,EAAAA,eAAe,GAAG,CACd;AACA;AACA;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAElD,MAAAA,SAAF;AAAa2B,MAAAA;AAAb,QAA6B,KAAKQ,KAAxC;AACA,UAAMgB,UAAU,GAAG;AACfhC,MAAAA,KAAK,EAAEnB,SADQ;AAEfoD,MAAAA,SAAS,EAAE,qBAFI;AAGfC,MAAAA,QAAQ,EAAE,KAAKpB,iBAHA;AAIfqB,MAAAA,OAAO,EAAE,MAAM;AACX,aAAKN,KAAL;AACH,OANc;AAOfO,MAAAA,MAAM,EAAE,MAAM;AACV,aAAKN,eAAL;AACH;AATc,KAAnB;AAWA,wBACI,QAAC,WAAD;AACI,MAAA,WAAW,EAAEtB,WADjB;AAEI,MAAA,2BAA2B,EAAE,KAAKF,2BAFtC;AAGI,MAAA,2BAA2B,EAAE,KAAKI,2BAHtC;AAII,MAAA,kBAAkB,EAAE,KAAKT,kBAJ7B;AAKI,MAAA,gBAAgB,EAAE,KAAKI,gBAL3B;AAMI,MAAA,oBAAoB,EAAE,KAAKM,oBAN/B;AAOI,MAAA,uBAAuB,EAAE,KAAKZ,uBAPlC;AAQI,MAAA,wBAAwB,EAAE,IAR9B;AASI,MAAA,UAAU,EAAEiC,UAThB;AAUI,MAAA,GAAG,EAAE,KAAKrC;AAVd;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAvIyC;;AA0I9C,MAAM0C,eAAe,GAAGrB,KAAK,IAAI;AAC7B,SAAO,EAAP;AAEH,CAHD;;AAKA,eAAe3C,OAAO,CAACgE,eAAD,EAAkB,IAAlB,CAAP,CAA+B5D,eAA/B,CAAf","sourcesContent":["import React from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport \"./InputSuggest.scss\";\r\n\r\nconst isAlphaNumericChar = keycode => {\r\n    return (keycode >= 48 && keycode <= 57) || (keycode >= 65 && keycode <= 90);\r\n};\r\n\r\nclass InputSuggestion extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            textInput: '',\r\n            suggestions: []\r\n        };\r\n        document.addEventListener('keydown', this.freeTyping.bind(this), false);\r\n    }\r\n\r\n    freeTyping(e) {\r\n        if (!isAlphaNumericChar(e.keyCode)) {\r\n            return;\r\n        }\r\n        if (e.target.value === undefined) {\r\n            this.inputSearch.focus();\r\n        }\r\n    }\r\n\r\n    getSuggestions = textInput => {\r\n        // if (!textInput || textInput.length === 0) return []; //chưa nhập -> chưa gợi ý\r\n        const inputValue = textInput.trim().toLowerCase();\r\n\r\n        if (!this.props.inputsWithIndex) {\r\n            return [{ textInput: textInput }];\r\n        };\r\n        let inputsWithIndex = this.props.inputsWithIndex;\r\n        let keyArr = Object.keys(inputsWithIndex).filter(\r\n            textInput => {\r\n                return textInput.toLowerCase().indexOf(inputValue) >= 0\r\n            }\r\n        );\r\n        var suggestArr = keyArr.map(function (key) {\r\n            return inputsWithIndex[key];\r\n        });\r\n\r\n        return suggestArr;\r\n    };\r\n\r\n    storeInputReference = autosuggest => {\r\n        if (autosuggest !== null) {\r\n            this.inputSearch = autosuggest.input;\r\n        }\r\n    };\r\n\r\n    shouldRenderSuggestions = value => {\r\n        return true;\r\n    };\r\n\r\n    getSuggestionValue = suggestion => {\r\n        this.props.onSelected(suggestion);\r\n        return suggestion.displayName;\r\n    }\r\n    \r\n    renderSuggestion = suggestion => {\r\n        return (\r\n            <div className=\"suggest-item\">\r\n                {suggestion.displayName}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n            suggestions: this.sortSuggestions(this.getSuggestions(value), value)\r\n        });\r\n    };\r\n\r\n    sortSuggestions(suggestions, value) {\r\n        var results =  _.sortBy(suggestions, (element) => {\r\n            return element.displayName\r\n        })\r\n        return results;\r\n    }\r\n\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    onSuggestionSelected = (event, selected) => {\r\n        this.props.onSelected(selected.suggestion)\r\n        this.setState({\r\n            textInput: selected.suggestion && selected.suggestion.displayName\r\n        });\r\n    };\r\n\r\n    handleChangeInput = (event, { newValue }) => {\r\n        this.setState({\r\n            textInput: newValue || ''\r\n        });\r\n    };\r\n\r\n    reset() {\r\n        this.setState({\r\n            textInput: ''\r\n        });\r\n        this.onSuggestionsFetchRequested({ value: '' });\r\n    }\r\n\r\n    handleBlurInput() {\r\n        // this.setState({\r\n        //     textInput: ''\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        const { textInput, suggestions } = this.state;\r\n        const inputProps = {\r\n            value: textInput,\r\n            className: \"custom-form-control\",\r\n            onChange: this.handleChangeInput,\r\n            onClick: () => {\r\n                this.reset();\r\n            },\r\n            onBlur: () => {\r\n                this.handleBlurInput();\r\n            }\r\n        };\r\n        return (\r\n            <Autosuggest\r\n                suggestions={suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={this.getSuggestionValue}\r\n                renderSuggestion={this.renderSuggestion}\r\n                onSuggestionSelected={this.onSuggestionSelected}\r\n                shouldRenderSuggestions={this.shouldRenderSuggestions}\r\n                highlightFirstSuggestion={true}\r\n                inputProps={inputProps}\r\n                ref={this.storeInputReference}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(InputSuggestion);\r\n"]},"metadata":{},"sourceType":"module"}