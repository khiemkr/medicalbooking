{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { getAllCodeService, createNewUserService, getAllUsers, deleteUserService, editUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctor } from '../../services/userService';\nimport { toast } from 'react-toastify'; // export const fetchGenderStart = () => {\n//     return async (dispatch,getState)=>{\n//         try {\n//             dispatch({type: actionTypes.FETCH_GENDER_START})\n//             let res = await getAllCodeService(\"GENDER\");\n//             if(res && res.errCode === 0){\n//                 dispatch(fetchGenderSuccess(res.data));\n//             }else{\n//                 dispatch(fetchGenderFailed());\n//             }\n//         } catch (e) {\n//             dispatch(fetchGenderFailed());\n//             console.log(e)\n//         }\n//     }\n// }\n// export const fetchGenderSuccess = (genderData) => ({\n//     type: actionTypes.FETCH_GENDER_SUCCESS,\n//     data: genderData\n// })\n// export const fetchGenderFailed = () => ({\n//     type: actionTypes.FETCH_GENDER_FAILED\n// })\n\nexport const fetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"POSITION\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchPositionSuccess(res.data));\n      } else {\n        dispatch(fetchPositionFailed());\n      }\n    } catch (e) {\n      dispatch(fetchPositionFailed());\n      console.log(e);\n    }\n  };\n};\nexport const fetchPositionSuccess = positionData => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: positionData\n});\nexport const fetchPositionFailed = () => ({\n  type: actionTypes.FETCH_POSITION_FAILED\n}); // export const fetchRoleStart = () => {\n//     return async (dispatch,getState)=>{\n//         try {\n//             let res = await getAllCodeService(\"ROLE\");\n//             if(res && res.errCode === 0){\n//                 dispatch(fetchRoleSuccess(res.data));\n//             }else{\n//                 dispatch(fetchRoleFailed());\n//             }\n//         } catch (e) {\n//             dispatch(fetchRoleFailed());\n//             console.log(e)\n//         }\n//     }\n// }\n// export const fetchRoleSuccess = (roleData) => ({\n//     type: actionTypes.FETCH_ROLE_SUCCESS,\n//     data: roleData\n// })\n// export const fetchRoleFailed = () => ({\n//     type: actionTypes.FETCH_ROLE_FAILED\n// })\n\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService(data);\n      console.log('check', res);\n\n      if (res && res.success === true) {\n        toast.success('Create new user success');\n        dispatch(saveUserSuccess());\n        dispatch(fetchAllUserStart());\n      } else {\n        dispatch(saveUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const saveUserSuccess = () => ({\n  type: actionTypes.CREATE_USER_SUCCESS\n});\nexport const saveUserFailed = () => ({\n  type: actionTypes.CREATE_USER_FAILD\n});\nexport const fetchAllUserStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllUsers(\"All\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllUserSuccess(res.users.reverse()));\n      } else {\n        dispatch(fetchAllUserFailed());\n      }\n    } catch (e) {\n      dispatch(fetchAllUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const fetchAllUserSuccess = data => ({\n  type: 'FETCH_ALL_USER_SUCCESS',\n  users: data\n});\nexport const fetchAllUserFailed = () => ({\n  type: 'FETCH_ALL_USER_FAILED'\n});\nexport const deleteUser = userId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUserService(userId);\n      console.log('check', res);\n\n      if (res && res.errCode === 0) {\n        toast.success('Delete user success');\n        dispatch(deleteUserSuccess());\n        dispatch(fetchAllUserStart());\n      } else {\n        toast.error('Delete user error');\n        dispatch(deleteUserFailed());\n      }\n    } catch (e) {\n      dispatch(deleteUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const deleteUserSuccess = () => ({\n  type: 'DELETE_USER_SUCCESS'\n});\nexport const deleteUserFailed = () => ({\n  type: 'DELETE_USER_FAILD'\n});\nexport const editUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editUserService(data);\n      console.log('check', res);\n\n      if (res && res.errCode === 0) {\n        toast.success('Update user success');\n        dispatch(editUserSuccess());\n        dispatch(fetchAllUserStart());\n      } else {\n        toast.error('Update user error');\n        dispatch(editUserFailed());\n      }\n    } catch (e) {\n      dispatch(editUserFailed());\n      console.log(e);\n    }\n  };\n};\nexport const editUserSuccess = () => ({\n  type: 'EDIT_USER_SUCCESS'\n});\nexport const editUserFailed = () => ({\n  type: 'EDIT_USER_FAILD'\n});\nexport const fetchTopDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopDoctorHomeService('');\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\n          dataDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDoctors('');\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\n          dataAllDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const saveDetailInfoDoctor = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailDoctor(data);\n\n      if (res && res.errCode === 0) {\n        toast.success('user info detail doctor success');\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS\n        });\n      } else {\n        toast.error('user info detail doctor fail');\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      toast.error('user info detail doctor fail');\n      dispatch({\n        type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED\n      });\n    }\n  };\n};\nexport const fetchAllScheduleHours = type => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService('TIME');\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED\n        });\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED\n      });\n    }\n  };\n};","map":{"version":3,"sources":["D:/NienLuan/project/REACTJS/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeService","createNewUserService","getAllUsers","deleteUserService","editUserService","getTopDoctorHomeService","getAllDoctors","saveDetailDoctor","toast","fetchPositionStart","dispatch","getState","res","errCode","fetchPositionSuccess","data","fetchPositionFailed","e","console","log","positionData","type","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAILED","createNewUser","success","saveUserSuccess","fetchAllUserStart","saveUserFailed","CREATE_USER_SUCCESS","CREATE_USER_FAILD","fetchAllUserSuccess","users","reverse","fetchAllUserFailed","deleteUser","userId","deleteUserSuccess","error","deleteUserFailed","editUser","editUserSuccess","editUserFailed","fetchTopDoctor","FETCH_TOP_DOCTOR_SUCCESS","dataDoctors","FETCH_TOP_DOCTOR_FAILED","fetchAllDoctor","FETCH_ALL_DOCTOR_SUCCESS","dataAllDoctors","FETCH_ALL_DOCTOR_FAILED","saveDetailInfoDoctor","SAVE_DETAIL_DOCTOR_SUCCESS","SAVE_DETAIL_DOCTOR_FAILED","fetchAllScheduleHours","FETCH_ALLCODE_SCHEDULE_HOURS_SUCCESS","dataTime","FETCH_ALLCODE_SCHEDULE_HOURS_FAILED"],"mappings":"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","sourcesContent":["import actionTypes from './actionTypes';\r\nimport { getAllCodeService,createNewUserService,getAllUsers,deleteUserService,editUserService,getTopDoctorHomeService, getAllDoctors,saveDetailDoctor } from '../../services/userService';\r\nimport { toast } from 'react-toastify';\r\n// export const fetchGenderStart = () => {\r\n//     return async (dispatch,getState)=>{\r\n//         try {\r\n//             dispatch({type: actionTypes.FETCH_GENDER_START})\r\n//             let res = await getAllCodeService(\"GENDER\");\r\n//             if(res && res.errCode === 0){\r\n//                 dispatch(fetchGenderSuccess(res.data));\r\n\r\n//             }else{\r\n//                 dispatch(fetchGenderFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(fetchGenderFailed());\r\n//             console.log(e)\r\n//         }\r\n//     }\r\n// }\r\n// export const fetchGenderSuccess = (genderData) => ({\r\n//     type: actionTypes.FETCH_GENDER_SUCCESS,\r\n//     data: genderData\r\n// })\r\n// export const fetchGenderFailed = () => ({\r\n//     type: actionTypes.FETCH_GENDER_FAILED\r\n// })\r\n\r\n\r\n\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllCodeService(\"POSITION\");\r\n            if(res && res.errCode === 0){\r\n                dispatch(fetchPositionSuccess(res.data));\r\n            }else{\r\n                dispatch(fetchPositionFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData\r\n})\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAILED\r\n})\r\n\r\n\r\n\r\n// export const fetchRoleStart = () => {\r\n//     return async (dispatch,getState)=>{\r\n//         try {\r\n//             let res = await getAllCodeService(\"ROLE\");\r\n//             if(res && res.errCode === 0){\r\n//                 dispatch(fetchRoleSuccess(res.data));\r\n\r\n//             }else{\r\n//                 dispatch(fetchRoleFailed());\r\n//             }\r\n//         } catch (e) {\r\n//             dispatch(fetchRoleFailed());\r\n//             console.log(e)\r\n//         }\r\n//     }\r\n// }\r\n// export const fetchRoleSuccess = (roleData) => ({\r\n//     type: actionTypes.FETCH_ROLE_SUCCESS,\r\n//     data: roleData\r\n// })\r\n// export const fetchRoleFailed = () => ({\r\n//     type: actionTypes.FETCH_ROLE_FAILED\r\n// })\r\n\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            console.log('check',res)\r\n            if(res && res.success === true){\r\n                toast.success('Create new user success')\r\n                dispatch(saveUserSuccess());\r\n                dispatch(fetchAllUserStart());\r\n            }else{\r\n                dispatch(saveUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(saveUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveUserSuccess = () => ({\r\n    type: actionTypes.CREATE_USER_SUCCESS,\r\n})\r\n\r\nexport const saveUserFailed = () => ({\r\n    type: actionTypes.CREATE_USER_FAILD,\r\n})\r\n\r\n\r\nexport const fetchAllUserStart = () => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllUsers(\"All\");\r\n            if(res && res.errCode === 0){\r\n                dispatch(fetchAllUserSuccess(res.users.reverse()));\r\n            }else{\r\n                dispatch(fetchAllUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchAllUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport const fetchAllUserSuccess = (data) =>({\r\n    type: 'FETCH_ALL_USER_SUCCESS',\r\n    users: data\r\n})\r\nexport const fetchAllUserFailed = () =>({\r\n    type: 'FETCH_ALL_USER_FAILED',\r\n})\r\n\r\n\r\nexport const deleteUser = (userId) => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            console.log('check',res)\r\n            if(res && res.errCode === 0){\r\n                toast.success('Delete user success')\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(fetchAllUserStart());\r\n            }else{\r\n                toast.error('Delete user error')\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(deleteUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUserSuccess = () =>({\r\n    type: 'DELETE_USER_SUCCESS',\r\n})\r\nexport const deleteUserFailed = () =>({\r\n    type: 'DELETE_USER_FAILD',\r\n})\r\n\r\nexport const editUser = (data) => {\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await editUserService(data);\r\n            console.log('check',res)\r\n            if(res && res.errCode === 0){\r\n                toast.success('Update user success')\r\n                dispatch(editUserSuccess());\r\n                dispatch(fetchAllUserStart());\r\n            }else{\r\n                toast.error('Update user error')\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(editUserFailed());\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const editUserSuccess = () =>({\r\n    type: 'EDIT_USER_SUCCESS',\r\n})\r\nexport const editUserFailed = () =>({\r\n    type: 'EDIT_USER_FAILD',\r\n})\r\n\r\n\r\nexport const fetchTopDoctor = () =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getTopDoctorHomeService('');\r\n            if(res && res.errCode === 0){\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTOR_SUCCESS,\r\n                    dataDoctors: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTOR_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_TOP_DOCTOR_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllDoctor = () =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllDoctors('');\r\n            if(res && res.errCode === 0){\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTOR_SUCCESS,\r\n                    dataAllDoctors: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTOR_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTOR_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveDetailInfoDoctor = (data) =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await saveDetailDoctor(data);\r\n            if(res && res.errCode === 0){\r\n                toast.success('user info detail doctor success')\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS,\r\n                })\r\n            }else{\r\n                toast.error('user info detail doctor fail')\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error('user info detail doctor fail')\r\n            dispatch({\r\n                type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllScheduleHours = (type) =>{\r\n    return async (dispatch,getState)=>{\r\n        try {\r\n            let res = await getAllCodeService('TIME');\r\n            if(res && res.errCode === 0){\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_SUCCESS,\r\n                    dataTime: res.data\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED,\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALLCODE_SCHEDULE_HOURS_FAILED,\r\n            })\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}